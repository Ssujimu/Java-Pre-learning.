메소드(Method)
 - 객체가 가지는 기능을 구현해 놓은 것으로서 클래스 내부에서 정의되며 프로그램의 실제 작업을 처리하는 영역
 - 선언법
접근제어지시자 [static] 리턴타입 메소드명([매개변수(들)]) { 메소드내용; }
	접근제어지시자 : 해당 메소드에 외부 클래스에서 접근할 수 있는 권한을 표시하는 키워드
	 - public, protected, default(생략), private 중 택일
	 static : 클래스멤버 여부를 지정하는 키워드로 생략 가능
	 리턴타입 : 메소드의 실행결과를 리턴할 지 여부와 리턴시 리턴값의 자료형을 지정
	  - void : 리턴값이 없다는 의미
	  - 모든 종류의 데이터 타입 : 지정한 자료형의 데이터를 리턴하는 메소드를 의미
	 메소드명 : 변수와 동일한 방법으로 이름을 지음
	  - 멤버변수 값 변경(setter) : set변수명(바꿀값)
	  - 멤버변수 값 참조(getter) : get변수명()
	  - 리턴타입이 boolean일 경우 getter는 : is변수명()
	  - 각 변수들의 값을 초기화 시키는 메소드 : init~()
	 매개변수 : 인수, 파라미터(parameter), 아규먼트(argument) 등으로 불리우기도 함
	  - 메소드에서 작업시 필요한 데이터들을 메소드 호출할 때 받아오는 기능으로 경우에 따라 없을 수도 있음
	  - 메소드 시작과 동시에 생성되어 사용되다가 메소드 실행 종료시 매개변수도 같이 소멸함

main() 메소드
 - 프로그램(웹은 제외) 마다 최소 하나 이상씩 존재해야 하는 필수 메소드
 - main()메소드의 시작이 프로그램의 시작이며, 종료 역시 프로그램의 종료를 의미함
 - main()메소드가 들어있는 클래스에서는 다른 메소드를 정의할 때에도 무조건 'public static'으로 선언해야 함
 - main()메소드는 JVM에서 자동으로 호출하여 실행됨


return 명령어
 - 리턴타입이 있는 메소드에서 특정 값을 리턴하고 메소드를 종료시키는 역할을 함
	매개변수는 여러 개를 지정할 수 있으나 리턴 값은 하나만 가능
	여러 개의 값을 리턴해야 하는 경우에는 배열이나 컬렉션 등의 객체를 이용함
 - void 메소드에서 사용하면 메소드를 강제 종료 시킴
 - main()메소드에서 return 명령이 실행되면 프로그램이 강제로 종료됨
 - if문 안에서 return 할 경우 반드시 else문이 있거나 if문 밖에서 return 해야함

변수의 가시성(Visibility)
 - 변수는 기본적으로 선언된 영역(중괄호) 안에서만 사용이 가능
 - 전역변수나 지역변수 같은 용어를 사용하기도 하지만 엄밀히 말하면 C언어에서의 용어로 자바에서는 사용하지 않음
 - C언어에서의 전역변수는 자바에서는 멤버변수, 클래스 변수, 인스턴스 변수 등으로 나뉘어 사용할 수 있음


클래스(Class)
 - 자바를 이루고 있는 객체(Object)로 모든 자바의 내용은 클래스 안에 들어있음
 - 클래스는 내부에 멤버라고 하는 값(변수, 상수)과 기능(메소드)으로 구성되어 있음
 	멤버변수 : 클래스가 가지고 있는 특징으로 변수나 상수의 형태로 존재하며 클래스 전체에서 사용이 가능
	멤버메소드 : 클래스로 할 수 있는 여러 기능들을 구현해 놓은 것
 - 클래스는 자료형으로도 사용됨(자료형으로서 인스턴스를 생성하게 해줌)

인스턴스(Instance)
 - 클래스를 기반으로 하여 새롭게 생성되는 객체로서 일반적으로 프로그래밍에서 객체라 함은 인스턴스를 의미
 - 다른 클래스의 멤버(거의 메소드를 의미)들을 사용하기 위해 생성하는 경우가 많다.
 - 이름을 변수와 동일한 방식으로 지어서 사용함(선언하는 방법이 변수와 동일)
 - 선언 및 생성 : 클래스명 인스턴스명 = new 클래스명([매개변수(들)]);


생성자(Constructor)
 - 모든 클래스에 하나 이상 존재하는 일종의 메소드로 인스턴스를 생성시키는 작업을 함
 	생성자를 따로 정의하지 않으면 JVM에서 자동으로 디폴트 생성자를 만들어 줌
 - 생성자는 인스턴스 생성시에만 한 번 동작됨(두 번 다시 호출 못함)
 	다시 호출하려면 다른 인스턴스를 생성해야 함(인스턴스 당 한 번만 실행됨)
 - 생성자의 이름은 반드시 클래스와 동일해야 함(첫 글자를 대문자로....)
 - 생성자는 리턴타입을 입력하지 않음(void도 입력 안함)
 - 주로 멤버변수들의 초기화에 많이 사용됨

정보은닉(Information Hiding)
 - 다른 클래스에서 인스턴스를 통해 멤버에 직접적으로 접근하는 것을 막는 것
 	대부분 멤버변수에 보안으로 사용됨(경우에 따라서 메소드에도 사용되기도 함)
 - 접근을 막을 멤버의 선언부에 접근제어지시자로 'private'을 붙이면 됨
	멤버변수에는 거의 모두 붙여야 함(붙지 않는 변수가 있을 경우 정말 붙이지 않아도 되는지 확인해야 함)
	멤버상수에는 private을 붙이지 않는 경우도 존재함
 - private이 붙은 멤버변수의 값을 참조하거나 변경하려면 메소드(setter, getter)를 통해 작업해야 함
 	메소드를 통하면 값의 유효성 검사를 할 수 있기 때문에 메소드를 통해 작업해야 함

접근제어지시자(Access Control Specifiers)
 - 클래스와 멤버들에 대한 접근 권한을 부여하는 명령어
지시자			같은 클래스		동일 패키지		상속 클래스		기타 영역
private				O				X				X				X
default				O				O				X				X
protected			O				O				O				X
public				O				O				O				O
 - private : 한 클래스내에서만 접근이 가능한 가장 폐쇄적인 지시자로 보통 멤버변수와 클래스내에서만 사용하는 메소드 등에 사용됨
 - default : 같은 패키지(폴더) 안에서만 접근이 가능하며, 지시자를 입력하지 않은 상태를 의미
 - protected : 같은 상위(슈퍼) 클래스를 가지거나 상속받은 클래스에서도 접근이 가능한 상태
 - public : 모든 영역에서 자유롭게 접근을 허용하는 지시자
 	클래스에 public을 붙이는 경우 한 파일에 여러 개의 클래스가 있으면 하나에만 붙여야 함
	public이 붙은 클래스가 그 파일의 이름이 되어야 함

클래스 멤버
 - 멤버들 중 'static'이라는 키워드가 붙는 멤버들을 클래스 멤버라고 함
    일반적으로 멤버라고 하면 인스턴스 멤버를 의미하며, 인스턴스를 빼고 그냥 멤버라고 함
 - 클래스 멤버는 인스턴스 멤버와 다르게 인스턴스 내에 존재하지 않고 따로 존재하게 됨
    모든 인스턴스는 클래스 멤버를 공유함
 - 인스턴스와 상관없이 클래스 이름으로도 접근이 가능하며, 인스턴스를 통해서도 접근이 가능
    될 수 있으면 클래스를 통해 접근하는 것이 좋다.(인스턴스 멤버와 구분하기 위해서)
 - 클래스 멤버는 인스턴스가 생성되기 전에 이미 메모리에 생성되어 있음
 - 클래스 메소드로 지정하려면 반드시 메소드 내부에서 인스턴스 변수를 참조하는 일이 없어야 함
    일반 메소드에서 클래스 변수를 참조할 수 있으나, 클래스 메소드에서는 인스턴스 변수를 참조할 수 없음
